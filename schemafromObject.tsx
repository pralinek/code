const mongoose = require('mongoose');
const { Schema } = mongoose;

function createSchemaDefinition(obj) {
  const schemaDefinition = {};
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      const value = obj[key];
      if (typeof value === 'object' && !Array.isArray(value) && value !== null) {
        // If the value is an object, recursively create a nested schema
        schemaDefinition[key] = createSchemaDefinition(value);
      } else if (Array.isArray(value)) {
        // If the value is an array, determine the type of the first element
        if (value.length > 0) {
          schemaDefinition[key] = [createSchemaDefinition(value[0])];
        } else {
          schemaDefinition[key] = [];
        }
      } else {
        // Use the type of the value as the schema type
        schemaDefinition[key] = getType(value);
      }
    }
  }
  return schemaDefinition;
}

function getType(value) {
  switch (typeof value) {
    case 'string':
      return String;
    case 'number':
      return Number;
    case 'boolean':
      return Boolean;
    default:
      return Schema.Types.Mixed;
  }
}

function createMongooseSchemaFromObject(obj, schemaName) {
  const schemaDefinition = createSchemaDefinition(obj);
  return new Schema(schemaDefinition, { collection: schemaName });
}

// Example usage
const exampleObject = {
  name: 'John Doe',
  age: 30,
  isActive: true,
  address: {
    street: '123 Main St',
    city: 'New York',
    zipCode: 10001
  },
  tags: ['developer', 'javascript'],
  metadata: {
    createdAt: new Date(),
    updatedBy: 'admin'
  }
};

const schemaName = 'ExampleCollection';
const exampleSchema = createMongooseSchemaFromObject(exampleObject, schemaName);
const ExampleModel = mongoose.model('Example', exampleSchema);

console.log(exampleSchema);
Explanation
createSchemaDefinition Function:

This function takes an object and returns a schema definition by iterating over the object's keys.
If a key's value is an object, it recursively calls itself to handle nested objects.
If a key's value is an array, it checks the type of the first element to determine the schema type for the array.
For other types (string, number, boolean), it assigns the corresponding Mongoose schema type.
getType Function:

Maps JavaScript types to Mongoose schema types.
createMongooseSchemaFromObject Function:

Combines the schema definition generated by createSchemaDefinition with the schema name to create a Mongoose schema.
Example Usage:

An example object is provided to demonstrate how to use the function.
The generated schema is then used to create a Mongoose model.
Note
Flexibility: This approach provides a dynamic way to create schemas based on objects, which is useful for scenarios where the structure of data may vary.
Validation and Optimization: Depending on the use case, you may want to add additional validation, constraints, and optimizations to the generated schema.
This code snippet should help you dynamically create Mongoose schemas based on the structure of provided objects.








